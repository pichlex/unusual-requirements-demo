from typing import List, Optional
from pydantic import BaseModel, Field
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
import json
import re
from dotenv import load_dotenv
import logging
import streamlit as st


load_dotenv()
logging.basicConfig(level=logging.INFO)

class UnusualRequirement(BaseModel):
    requirement: str = Field(description="–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    category: Optional[str] = Field(
        description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞—Ü–∏—è, –ø–∏—Ç–∞–Ω–∏–µ, –≤–∏–¥, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.)", 
        default=None
    )

class ExtractionResult(BaseModel):
    unusual_requirements: List[UnusualRequirement] = Field(
        description="–°–ø–∏—Å–æ–∫ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"
    )

template = """
–ò–∑–≤–ª–µ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç—É—Ä.
–ü—Ä–∏–º–µ—Ä—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:
- –û—Ç–µ–ª—å —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –§–æ—Ä–º—É–ª—ã 1 (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ª–æ–∫–∞—Ü–∏—è)
- –û—Ç–µ–ª—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–ª—è–∂–µ–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ª–æ–∫–∞—Ü–∏—è)
- –û—Å–æ–±–µ–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≥–æ—Å—Ç—è–º (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–µ—Ä–≤–∏—Å)
- –û—Å–æ–±–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–µ—Ä–≤–∏—Å)
- –° –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è –¥–µ—Ç–µ–π (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–µ—Ä–≤–∏—Å)
- –ú–æ–∂–Ω–æ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Å–µ—Ä–≤–∏—Å)
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –≤–∏–¥–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –≤–∏–¥)
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –≤–∏–¥—É (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –≤–∏–¥)
- –ë–ª–∏–∑–æ—Å—Ç—å –∫ –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –∏–ª–∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ª–æ–∫–∞—Ü–∏—è)
- –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∏—Ç–∞–Ω–∏—é (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ø–∏—Ç–∞–Ω–∏–µ)
- –ù–µ–æ–±—ã—á–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
- –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)
- –ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –∫–∞—Ç–µ—Ä–µ/–≤–µ—Ä—Ç–æ–ª–µ—Ç–µ/–¥–µ–ª—å—Ç–∞–ø–ª–∞–Ω–µ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)
- –°–ª–æ–∂–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –º–∞—Ä—à—Ä—É—Ç)

–ù–ï –°–ß–ò–¢–ê–Æ–¢–°–Ø –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ (–≤–∑—Ä–æ—Å–ª—ã—Ö/–¥–µ—Ç–µ–π)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞/–≤—ã–µ–∑–¥–∞
- –û–±—ã—á–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (SGL, DBL, TWIN, –∏ —Ç.–¥.)
- –û–±—ã—á–Ω—ã–µ —Ç–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞–∫, –ø–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω)
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤ –æ—Ç–µ–ª—å

–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {input}

–ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
"""

prompt = ChatPromptTemplate.from_template(template)

def clean_html(text):
    return re.sub(r'<.*?>', ' ', text).replace('  ', ' ').strip()

llm = ChatOpenAI(model="gpt-4.1", temperature=0)
extraction_chain = prompt | llm.with_structured_output(ExtractionResult)

def extract_unusual_requirements(requests_json):
    results = []
    
    for request in requests_json[:500]:
        try:
            comment = request.get("Comment", "")
            if comment:
                clean_comment = clean_html(comment)
                
                extraction_result = extraction_chain.invoke({"input": clean_comment})
                unusual_reqs = [
                    {"requirement": req.requirement, "category": req.category}
                    for req in extraction_result.unusual_requirements
                ]
                
                result = {
                    "number": request.get("number"),
                    "original_comment": comment,
                    "unusual_requirements": unusual_reqs
                }
                yield result
            else:
                yield {
                    "number": request.get("number"),
                    "unusual_requirements": []
                }
        except Exception as e:
            yield {
                "number": request.get("number"),
                "error": str(e)
            }
    
    return results



st.set_page_config(
    page_title="–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    page_icon="ü¶Ñ",
    layout="wide"
)

st.markdown(
    """
    <style>
    .result-header {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 0.2em;
    }
    .req-list li {
        margin-bottom: 0.3em;
    }
    .request-block {
        background-color: #f7f7fc;
        border-radius: 8px;
        padding: 1em 1.5em;
        margin-bottom: 1.5em;
        box-shadow: 0 2px 8px rgba(100,125,222,0.09);
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à JSON-—Ñ–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON-—Ñ–∞–π–ª", type=["json"])
if uploaded_file:
    requests_data = json.load(uploaded_file)
    st.info("–û–±—Ä–∞–±–æ—Ç–∫–∞...")

    progress_bar = st.progress(0)
    total = min(10, len(requests_data))
    results = []

    for idx, result in enumerate(extract_unusual_requirements(requests_data), 1):
        with st.container():
            #st.markdown(f'<div class="request-block">', unsafe_allow_html=True)
            st.markdown(f'<span class="result-header">üîπ {idx}. –ó–∞—è–≤–∫–∞ ‚Ññ {result["number"]}</span>', unsafe_allow_html=True)
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å"):
                st.markdown(f'<div style="color:#444;">{result["original_comment"] or "*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*"}</div>', unsafe_allow_html=True)
            if "error" in result:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {result['error']}")
            elif result["unusual_requirements"]:
                st.markdown("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**")
                st.markdown('<ul class="req-list">', unsafe_allow_html=True)
                for req in result["unusual_requirements"]:
                    st.markdown(f'<li> <b>{req["category"]}</b>: {req["requirement"]} </li>', unsafe_allow_html=True)
                st.markdown('</ul>', unsafe_allow_html=True)
            else:
                st.info("–ù–µ–æ–±—ã—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            st.markdown('</div>', unsafe_allow_html=True)
        results.append(result)
        progress_bar.progress(idx / total)

    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    st.download_button(
        "üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        data=json.dumps(results, ensure_ascii=False, indent=2),
        file_name="unusual_requirements.json",
        mime="application/json"
    )
